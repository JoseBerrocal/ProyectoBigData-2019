parte_de_ML

# EN CASO QUE LA TABLA TABLON TENGA LA DATA CORRECTA PODRIAN EJECUTARSE LOS SIGUIENTES COMANDOS



# SE LE LA DATA

val df_ml_tablon = spark.read.table("trabajo4.tablon")



# SE GENERA EL VECTOR

feature_columns = df_ml_tablon.columns[:-1] #se quita la última fila

from pyspark.ml.feature import VectorAssembler

assembler_ml = VectorAssembler(inputCols=feature_columns,outputCol="features") #Nombre de la columna de salida es features
df_ml_tablon_2 = assembler_ml.transform(df_ml_tablon)


# SE HACE LA SEPARACIÓN ENTRE TRAIN Y TEST

train, test = df_ml_tablon_2.randomSplit([0.7, 0.3])


# SE ENTRENA EL ALGORITMO EN ESTA CASO ES RANDOM FOREST

from pyspark.ml.regression import randomforestregressor


# SE ESPECIFICAN 2 COLUMNAS

random_forest_ml = LinearRegression(featuresCol="features", labelCol="date_sent_to_company")


# ENTRENAMIENTO

modelo_rf_ml = random_forest_ml.fit(train)


# EVALUAMOS EL PERFORMANE

evaluation_summary = modelo_rf_ml.evaluate(test)

evaluation_summary.meanAbsoluteError

evaluation_summary.rootMeanSquaredError

evaluation_summary.r2



